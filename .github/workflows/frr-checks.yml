name: libyang+FRR HEAD CI
run-name: libyang CI FRR ${{ github.actor }}  ⚗️
on:
  workflow_dispatch:
    inputs:
      frr-versions:
        description: 'FRRouting version'
        required: true
        default: 'master'
        type: choice
        options:
          - master
          - pull/15608/head
          - frr-10.0
          - frr-9.1
          - frr-9.0.2
          - frr-8.5.4
      libyang-versions:
        description: 'libyang version'
        required: true
        default: 'devel'
        type: choice
        options:
          - devel
          - v2.1.148
          - v2.1.128
# schedule:
#   # every night at 1.10
#   - cron: '10 1 * * *'
# the following in pending for fixes per the comments of pr !2203
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
jobs:
  build-frr:
    name: Build FRR+libyang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ gcc ]
#       frr-versions:
#         - frr-9.1
#         - frr-9.0.2
#         - frr-8.5.4
#       libyang-versions:
#         - v2.1.128
    steps:
      - name: add missing packages per building-frr-for-ubuntu2204
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages:
            git
            autoconf
            libtool
            make
            libreadline-dev
            texinfo
            pkg-config
            libelf-dev
            libpam0g-dev
            libjson-c-dev
            bison
            flex
            libc-ares-dev
            python3-dev
            python3-sphinx
            install-info
            build-essential
            libsnmp-dev
            perl
            libcap-dev
            libelf-dev
            libunwind-dev
            protobuf-c-compiler
            libprotobuf-c-dev
            libgrpc++-dev
            protobuf-compiler-grpc
            libsqlite3-dev
            libzmq5
            libzmq3-dev
            python3-pytest
            gdb
      - name: libyang devel ${{ matrix.compiler }}
        uses: actions/checkout@v4
        with:
          ref: devel
          submodules: false
          fetch-depth: 0
          filter: tree:0
          fetch-tags: true
          path: 'ly'
      - name: make libyang from upstream
        working-directory: 'ly'
        run: >-
          git branch &&
          mkdir build && cd build &&
          export CC=${{ matrix.compiler }} &&
          cmake --install-prefix /usr -DCMAKE_BUILD_TYPE:String="Release" .. &&
          make -j $(nproc) &&
          sudo make install
      - name: Add FRR user and groups
        run: >-
          sudo groupadd -r -g 92 frr &&
          sudo groupadd -r -g 85 frrvty &&
          sudo adduser --system --ingroup frr --home /var/run/frr/ --gecos "FRR suite" --shell /sbin/nologin frr &&
          sudo usermod -a -G frrvty frr
      - name: FRR github checkout
        uses: actions/checkout@v4
        with:
          repository: 'vjardin/frr.git'
          ref: 'libyang3'
          submodules: false
          fetch-depth: 0
          filter: tree:0
          fetch-tags: true
          path: 'frr'
      - name: Cache FRR from devel ${{ matrix.compiler }}
        id: cache-frr
        uses: actions/cache@v4
        env:
          cache-name: cache-frrNlibyang-build
        with:
          path: |
            /home/runner/work/libyang/libyang/frr
            /home/runner/work/libyang/libyang/ly
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ env.cache-name }}
      - name: compile FRR with devel ${{ matrix.compiler }}
        if: ${{ always() }}
        working-directory: 'frr'
        run: >-
          ls -la ../.. &&
          ls -la .. &&
          ls -la &&
          export CC=${{ matrix.compiler }} &&
          ./bootstrap.sh &&
          mkdir build && cd build &&
          ../configure \
            --prefix=/usr \
            --includedir=\${prefix}/include \
            --bindir=\${prefix}/bin \
            --sbindir=\${prefix}/lib/frr \
            --libdir=\${prefix}/lib/frr \
            --libexecdir=\${prefix}/lib/frr \
            --sysconfdir=/etc \
            --localstatedir=/var \
            --with-moduledir=\${prefix}/lib/frr/modules \
            --enable-configfile-mask=0640 \
            --enable-logfile-mask=0640 \
            --enable-vtysh \
            --enable-pimd \
            --enable-pim6d \
            --enable-sharpd \
            --enable-snmp=agentx \
            --enable-multipath=64 \
            --enable-user=frr \
            --enable-group=frr \
            --enable-vty-group=frrvty \
            --with-pkg-git-version \
            --with-pkg-extra-version=-MyOwnFRRVersion &&
            make -j $(nproc) &&
            sudo make install
  test-libyangfrr:
    name: Test FRR+libyang
    runs-on: ubuntu-latest
    needs: build-frr
    strategy:
      matrix:
        compiler: [ gcc ]
        frr_topotests:
          - all_protocol_startup
          - mgmt_config
          - mgmt_debug_flags
          - mgmt_notif
          - mgmt_startup
          - rip_allow_ecmp
          - rip_passive_interface
          - rip_topo1
          - ripng_allow_ecmp
          - ripng_route_map
          - ripng_topo1
          - ospf_netns_vrf
          - ospf6_ecmp_inter_area
          - ospfv3_basic_functionality
          - isis_topo1
          - bfd_topo1
          - bgp_vrf_netns
          - bgp_route_map_on_match_next
#       frr-versions:
#         - frr-9.1
#         - frr-9.0.2
#         - frr-8.5.4
    steps:
      - name: add missing packages per building-frr-for-ubuntu2204
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages:
            git
            autoconf
            libtool
            make
            libreadline-dev
            texinfo
            pkg-config
            libelf-dev
            libpam0g-dev
            libjson-c-dev
            bison
            flex
            libc-ares-dev
            python3-dev
            python3-sphinx
            install-info
            build-essential
            libsnmp-dev
            perl
            libcap-dev
            libelf-dev
            libunwind-dev
            protobuf-c-compiler
            libprotobuf-c-dev
            libgrpc++-dev
            protobuf-compiler-grpc
            libsqlite3-dev
            libzmq5
            libzmq3-dev
            python3-pytest
            gdb
      - name: Cache FRR from devel ${{ matrix.compiler }}
        id: cache-frr
        uses: actions/cache@v4
        env:
          cache-name: cache-frrNlibyang-build
        with:
          path: |
            /home/runner/work/libyang/libyang/frr
            /home/runner/work/libyang/libyang/ly
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ env.cache-name }}
      - name: restore libyang ${{ matrix.compiler }} ${{ matrix.frr_topotests }}
        working-directory: 'ly'
        run: >-
          cd build && sudo make install
      - name: restore FRR user and groups
        run: >-
          sudo groupadd -r -g 92 frr &&
          sudo groupadd -r -g 85 frrvty &&
          sudo adduser --system --ingroup frr --home /var/run/frr/ --gecos "FRR suite" --shell /sbin/nologin frr &&
          sudo usermod -a -G frrvty frr
      - name: restore FRR ${{ matrix.compiler }} ${{ matrix.frr_topotests }}
        working-directory: 'frr'
        run: >-
          cd build && sudo make install
      - name: install exabgp
        if: startsWith(matrix.frr_topotests, 'bgp')
        working-directory: 'frr'
        run: >-
          sudo python3 -m pip install git+https://github.com/Exa-Networks/exabgp@0659057837cd6c6351579e9f0fa47e9fb7de7311 &&
          sudo useradd -d /var/run/exabgp/ -s /bin/false exabgp
      - name: topotest ${{ matrix.compiler }} ${{ matrix.frr_topotests }}
        working-directory: 'frr'
        run: >-
          cd tests/topotests &&
          cd ${{ matrix.frr_topotests }} && sudo pytest-3 -s -v &&
          sudo chown -R $(id -u).$(id -g) /tmp/topotests &&
          ls -la /tmp/ &&
          ls -la /tmp/topotests
      - name: upload FRR topotests artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: topotests-log-archive-${{ runner.os }}-${{ matrix.compiler }}-${{ matrix.frr_topotests }}
          path: /tmp/topotests
          if-no-files-found: error
          retention-days: 7
          compression-level: 9
